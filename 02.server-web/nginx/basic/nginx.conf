##################################################
#   Nginx 本身的配置文件
#
#   Author: J1nH4ng<jinhang@mail.14bytes.com>
#   Date: 2024-04-08
#   Editor: J1nH4ng<jinhang@mail.14bytes.com>
#   Edited Time: 2024-04-08
#
##################################################

# 指定可以运行 nginx 服务的用户和用户组
# user [user] [group];
# 将 user 指令注释掉或者配置成 nobody 的话，所有用户都可以运行。
user nginx nginx;

# 指定工作线程数，可以制定具体的进程数，也可以使用自动模式
# worker_processes 最多开启 8 个，8 个以上性能不会再提升，且稳定性降低。
worker_processes auto;
# 工作进程的 CPU 绑定由 Nginx 自动调整
worker_cpu_affinity auto;
# 一个 Nginx 进程打开的最多文件描述符数量
worker_rlimit_nofile 65535;

# 错误日志为，默认为 Nginx 的安装目录
# error_log [path] [debug | info | notice | warn | error | crit | alert | emerg];
# 其中 debug 级别的编译日志需要在编译时使用 --with-debug 开启 debug 开关
error_log /data/logs/nginx/error.log;
# 设置 pid 文件的存放位置
pid /run/nginx.pid;


events {
    # 当某一个时刻只有一个网络连接到来时，多个睡眠进程会被同时叫醒，但是只有一个进程可以获得连接。
    # 如果每次唤醒的进程数目太多，会影响一部分系统性能。在 Nginx 服务器多进程的情况下，就有可能出现这样的问题
    # accept_mutex on | off;

    # 如果 multi_accept 被禁止了， nginx 一个工作进程只能同时接受一个新的连接，否则，一个工作进程可以同时接受所有的新连接
    # 如果 nginx 使用 kqueue 连接方法，那么这条指令就会被忽略，因为这个方法会报告在等待被接受的新连接的数量。
    # 默认是 off 状态，只能在 event 块配置
    # multi_accept on | off;
    multi_accept on;

    # 指定使用哪种网络 I/O 模型， method 可以选择的模型有： epoll | poll | kqueue | select | rtsig | /dev/poll | eventport，一般操作系统不是支持上面所有模型的
    # 事件模型，epoll 模型是 Linux 内核中的高性能网络 I/O 模型，如果跑在 FreeBSD 上面，就使用 kqueue 模型
    use epoll;

    # 设置允许每一个 worker process 同时开启的最大连接数，当每个工作进程接受的连接数超过这个数值时不在接收连接
    # 当所有的工作进程都接收满时，新的连接被拒绝
    # 只能在 events 块中进行配置
    worker_connections 65535;

}

http {
    # 常见的浏览器中，可以显示的内容有 HTML，XML，GIF 等种类繁多的文本、媒体资源，浏览器为了区分这些资源，需要使用MIME TYPE
    # MIME Type是网络资源的媒体类型。Nginx服务器作为Web服务器，必须能够识别前端请求的资源类型。
    # 文件拓展名与文件类型映射表
    # mime.types 和 nginx.config 同级目录，不同级的话需要指定具体路径。
    include       mime.types;

    # 基于 Nginx_http_proxy_module 模块实现的代理功能，当 nginx 用做反向服务器时使用
    # location 中的局部设置会覆盖全局设置
    include /usr/local/nginx/conf/proxy.conf;

    # 当配置了 lua 模块时需要取消注释
    # 纯 Lua 模块：是由 Lua 编写
    # lua_package_path "/usr/local/lua-resty-core-0.1/lib/lua/?.lua;/usr/local/lua-resty-lrucache-0.13/lib/lua/?.lua;;";
    # Lua C 模块：是由 C 编写，并通过 Lua 的 C API 提供给 Lua 调用
    # lua_package_cpath "/path/to/lua/libs/?.so;;";

    # 使用方法：
    # location / {
    #   # 使用 Lua 模块处理请求
    #   content_by_lua_file /path/to/lua/script.lua;
    # }

    # 默认文件类型，如果不加此指令，默认值为 text/plain
    default_type  application/octet-stream;
    # 默认编码
    charset utf-8;

    # 开启高效文件传输模式
    sendfile   on;
    tcp_nopush on;

    # 增加小包的数量，提高响应速度
    # 设置为 off 时会增加通信的延迟，提高带宽利用率
    tcp_nodelay on;

    # 客户端请求头部的缓冲区大小，该值必须设置为“系统分页大小”的整数倍
    # 系统分页大小使用 `getconf PAGESIZE` 命令获取
    client_header_buffer_size 4k;

    # 大文件传输配置
    client_max_body_size 50m;
    client_body_buffer_size 128k;

    # 为打开文件指定缓存，默认是没有启用的
    # max 指定缓存数量，建议和打开文件数一致
    # inactive 是指经过多长时间文件没被请求后删除缓存
    # open_file_cache max=102400 inactive=30s;
    # open_file_cache_valid 30s;
    # open_file_cache_min_uses 1;
    # 指定是否在搜索一个文件时记录 cache 错误，默认值为 off
    # open_file_cache_errors on;

    # 隐藏 nginx 版本号
    server_tokens off;

    # 配置连接超时时间，此指令可以在 http 块、server 块或 location 块中配置
    # 与用户建立会话连接后，Nginx 服务器可以保持这些连接打开一段时间
    # timeout：服务器端对连接的保持时间，默认值为 75s
    # header_timout：可选项，在应答报文头部的 keep-alive 域设置超时时间："Keep-Alive:timeout= header_timeout"，这个指令可以被 Mozilla 或 Konqueror 识别。
    # keepalive_timeout timeout [header_timeout]
    keepalive_timeout 60s;

    # 配置单连接请求数上限，此指令可以在 http 块、server 块或 location 块中配置
    # Nginx 服务端和用户端建立会话连接后，用户端通过此连接发售请求，指令 keepalive_request 用户限制用户通过某一连接向 nginx 服务器发送请求的次数，默认为 100
    # keepalive_request number;

    # fastcgi 是一个用于处理动态内容的协议
    # nginx 接受 client 请求时的响应
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    # 开启 gzip 压缩
    gzip on;
    gzip_min_length 1k;     #最小压缩文件大小
    gzip_buffers 4 16k;     #压缩缓冲区
    gzip_comp_level 2;      #压缩等级
    gzip_types text/javascript text/css application/javascript application/json text/plain application/xml;  #压缩类型
    gzip_vary on;           #在响应头部添加 Accept-Encoding: gzip

    # 设置日志格式，main_json 为定义的格式名称，如此 access_log 就可以直接使用这个变量了
    log_format main_json
        '{"@timestamp":"$time_iso8601",'                      #时间格式
        '"server_addr":"$server_addr",'                       #服务器端地址
        '"hostname":"$hostname",'                             #主机名
        '"ip":"$http_x_forwarded_for",'                       #浏览当前页面的用户计算机的网关
        '"remote_addr":"$remote_addr",'                       #浏览当前页面的用户计算机的ip地址(上一级ip)
        '"request":"$request",'                               #客户端的请求地址
        '"request_method":"$request_method",'                 #http请求方法
        '"scheme":"$scheme",'                                 #请求使用的web协议
        '"body_bytes_sent":"$body_bytes_sent",'               #传输给客户端的字节数(不算响应头)
        '"request_time":"$request_time",'                     #处理客户端请求使用的时间
        '"upstream_response_time":"$upstream_response_time",' #请求过程中 upstream 响应时间
        '"upstream_addr":"$upstream_addr",'                   #后台 upstream 地址，即真正提供服务的主机地址
        '"host":"$host",'                                     #请求地址
        '"uri":"$uri",'                                       #请求中的当前url
        '"request_uri":"$request_uri",'                       #请求原始url
        '"args":"$args",'                                     #请求中的参数值
        '"http_referer":"$http_referer",'                     #url 跳转来源,用来记录从那个页面链接访问过来的
        '"http_user_agent":"$http_user_agent",'               #用户终端浏览器等信息
        '"status":"$status"}';                                #http响应代码

    # nginx 访问日志
    access_log  /data/logs/nginx/access.log main_json;

    include /usr/local/nginx/conf/conf.d/*.conf;
    include /usr/local/nginx/conf/conf.d/*/*.conf;
}
