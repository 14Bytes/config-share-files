#
# File Name: sysctl.conf
# File Path: /etc/sysctl.conf
#
# Author: J1n H4ng<jinhang@mail.14bytes.com>
# Date: April 11, 2024
#
# Last Editor: J1n H4ng<jinhang@mail.14bytes.com>
# Last Modified:  April 11, 2024
#
# Description: Linux 系统内核和网络优化设置
# Source URL:
#   - https://www.cnblogs.com/tingxin/p/12606166.html
#   - https://blog.csdn.net/alwaysbefine/article/details/123858239
#

# 魔法请求键，具体文档内容查看：https://www.kernel.org/doc/html/latest/translations/zh_CN/admin-guide/sysrq.html
# 0 - 完全不能使用 SysRq 键
# 1 - 可以使用 SysRq 键的所有功能
# >1 - 对于允许的 SysRq 键功能的比特掩码，具体查看文档内容
kernel.sysrq = 0

# 内核参数，用于决定是否在生成核心转储文件是是否包含进程的 PID 信息。
# 0 - 生成核心转储文件时不包含进程的 PID 信息
# 1 - 生成核心转储文件时包含进程的 PID 信息
# 这个参数用于区分不同的核心转储文件，使得在系统中存在多个转储文件时更容易区分它们的来源进程
# > 核心转储文件介绍：
# > 核心转储文件是在 Unix 和 类 Unix 系统上发生程序崩溃时生成的文件。当一个程序因为某种原因（比如内存错误、段错误等）异常终止时。
# > 操作系统会将程序的内存状态以及其他相关信息写入一个特殊的文件中，这个文件就是核心转储文件。
# > 核心转储文件包含了程序崩溃时的内存映像、程序计数器值、寄存器内容等信息，这些信息对于诊断程序崩溃的原因非常有用。
# > 通常，核心转储文件的生成是由操作系统内核自动完成的，但是可以通过配置操作系统的参数来控制核心转储文件的生成方式和存储位置。
# > 在一些系统中，核心转储文件可能会被用于调试分析程序崩溃的原因，或者用于改进程序的稳定性和可靠性。
kernel.core_uses_pid = 1
# 脚本内容:
# ------------Start Scripts------------
#
# #!/bin/bash
# if [! -d "/var/coredump" ]; then
#     mkdir /var/coredump
# fi
# gzip > "/var/coredump/$1"
#
# ------------End Scripts------------
#
# 最终在 /var/coredump 目录下生成 core_<线程名>_<线程ID>_<进程ID>_sig_<信号值>_time_<coredump时间>.gz 文件
# kernel.core_pattern = | /usr/bin/coredump_helper.sh core_%e_%I_%p_sig_%s_time_%t.gz

# 默认值为 16384(16KB)
# 用来控制系统中消息队列的最大字节数
# 消息队列是一种进程间通信的方式，用与在不同进程之间传递数据
# 适当调整这个值可以提高系统的性能和可靠性，但是需要根据具体的应用场景和系统资源来进行权衡和调整
kernel.msgmnb = 65536 # 2^16 次方
# 与 msgmnb 不同，msgmax 限制单个消息的大小而不是整个消息队列的大小
kernel.msgmax = 65536
# 用于定义单个共享内存段的最大值。设置应该足够大，能在一个共享片段下容纳整个 SGA
# 设置的过低可能会导致需要创建多个共享内存段，这样可能导致系统性能的下降
# 本质原因是在实例启动以及 ServerProcesses 创建的时候，多个小的共享内存片段可能会导致当时轻微的系统性能的降低，（在启动时需要创建多个虚拟地址段，在进程创建的时候要让进程对多个段进行“识别”，会有一些影响 ) ，但是其他时候都不会有影响
# 官方建议值：
# 32 位系统：可取最大值为 4GB - 1byte， 即为 4294967295。建议值为多于内存的一半，所以如果是 32 为系统，一般可取值为 4294967295 。 32 位系统对 SGA 大小有限制，所以 SGA 肯定可以包含在单个共享内存段中。
# 64 位系统：可取最大值为物理内值 - 1byte，建议值为多于物理内存的一半，一般取值大于 SGA_MAX_SIZE 即可，可以取物理内存 -1byte 。
# - 12G 时： 12 * 1024 * 1024 * 1024 - 1 = 12884901887
# - 16G 时： 16 * 1024 * 1024 * 1024 - 1 = 17179869183
# - 32G 时： 32 * 1024 * 1024 * 1024 - 1 = 34359738367
# - 64G 时： 64 * 1024 * 1024 * 1024 - 1 = 68719476735
# - 128G 时： 128 * 1024 * 1024 * 1024 - 1 = 137438953471
kernel.shmmax = 68719476735
# 控制可以使用的共享内存的总页数，Linux 的共享内存页大小为 4KB，共享内存段的大小都是共享内存页大小的整数倍
# 内存为 12G 时： 12 * 1024 * 1024 * 1024 / 4 * 1024 = 3145728
# 内存为 16G 时： 16 * 1024 * 1024 * 1024 / 4 * 1024 = 4194304
# 内存为 32G 时： 32 * 1024 * 1024 * 1024 / 4 * 1024 = 8388608
# 内存为 64G 时： 64 * 1024 * 1024 * 1024 / 4 * 1024 = 16777216
# 内存为 128G 时: 128 * 1024 * 1024 * 1024 / 4 * 1024 = 33554432
# 官方计算为 ceil(shmmax / PAGE_SIZE )，ceil 为向上取整函数
kernel.shmall = 16777216
# 可以创建的共享内存段的最大数量
kernel.shmmni = 4096 # 默认值
# 旧的：每 4M RAM，有 256 个
# 内存为 16G 时： 16 * 1024 * 256 / 4 = 1048576
# 内存为 32G 时： 32 * 1024 * 256 / 4 = 2097152
# 新的：每 1M RAM，有 1 个
# 内存为 16G 时： 16 * 1024 * 100 = 1638400
# 内存为 32G 时： 32 * 1024 * 100 = 3276800
# 默认设置为内存(KB)的 10%
fs.file-max = 1638400

# 内核参数，用于控制内存过度承诺策略。内存过度承诺策略允许进程分配比实际可用物理内存更多的内存量。
# 可以提供系统的内存利用率，但也可以导致内存耗尽和进程被杀死的风险
# 0 - 启用经典的内存过度承诺策略，内核尝试估算出剩余可用的内存
# 1 - 总是过度投入，内核允许超量使用内存直到用完为止，主要用于科学计算
# 2 - 不要过度投入
vm.overcommit_memory = 0
# vm.overcommit_memory = 2 时取消注释，value 值为 0-100，内存总量为：内存 * (value/100) + SWAP 分区大小，默认值为 50
# vm.overcommit_ratio = <value>

# 内核参数，用于控制系统对 SWAP 空间的使用倾向，默认值为 60，大小可以设置为 0 - 200
# 0 - 表示尽可能少的使用 SWAP
# 100 - 表示更倾向于使用 SWAP
# >100 - 磁盘交互比内存快时使用，如果快2倍，计算值为 2x + x = 200（两个设备 100 的和）, x = 133.33，值为 133.33
vm.swappiness = 0

# 内核参数，用于控制 IP 数据包的转发，在单个主机作为终端节点而不是路由器或网关时使用
# 0 - 禁用 IP 数据包转发
# 1 - 启用 IP 数据包转发
net.ipv4.ip_forward = 0


net.ipv4.conf.default.rp_filter =
net.ipv4.conf.all.rp_filter =

net.ipv4.icmp_echo_ignore_all=
net.ipv4.icmp_echo_ignore_broadcasts =

net.ipv4.conf.default.accept_source_route = 0

net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.tcp_sack = 1
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_rmem = 10240 87380 12582912
net.ipv4.tcp_wmem = 10240 87380 12582912
net.ipv4.tcp_men = 94500000 915000000 927000000

net.ipv4.tcp_max_orphans = 3276800
net.ipv4.tcp_max_syn_backlog = 262144

net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_fin_timeout = 1
net.ipv4.tcp_keepalive_time = 30
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.route.gc_timeout = 100

net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1

net.core.wmen_default = 8388608
net.core.rmem_default = 8388608
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.core.netdev_max_backlog = 262144
net.core.somaxconn = 40960

net.netfilter.nf_conntrack_max = 6553500
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120
net.netfilter.nf_conntrack_tcp_timeout_established = 3600
net.nf_conntrack_max = 6553500
